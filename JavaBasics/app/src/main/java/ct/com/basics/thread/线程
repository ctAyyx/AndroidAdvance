一.线程基础和锁
  1.线程的创建只有两种方式,继承Thread和实现Runnable
  2.线程的生命周期
  3.显示锁(手动调用加锁,解锁),隐式锁(synchronized),对象锁,类锁(类型对象)
  4.线程在有synchronized关键字并且没有抢到锁的情况下才会进入阻塞状态.
  5.停止线程,不能使用stop()方法,这是不安全的.应该想办法让run方法执行完成,比如发中断信号
二.ThreadLocal和CAS
  1.ThreadLocal为每个线程创建一个变量的副本,每个线程都操作自己线程的副本,实现线程隔离.
  为了避免A线程操作数据的时候,B现在修改数据的情况.以往需要使用加锁.
  2.CAS(Compare And Swap) CPU提供的一个原子操作指令,参数为(需要修改的内存地址,期望的值(旧值),修改后的值(新值))
    为什么要使用CAS:因为使用加锁的机制,没有抢到锁的线程会进入阻塞状态,这个时候就会发生上下文切换(3-5ms),在被唤醒时,又会发生一次上下文切换.费时也耗费系统资源
    而一次CPU指令的执行只需要几个ns,所以是相当节约时间的.
    为什么有了CAS,却没有淘汰锁呢:主要是因为CAS的存在的3大问题.
     1.ABA问题.因为CAS操作只是单纯的比较旧值,然后替换新值.就会出现如果A线程要将变量0改为1,而B线程在A线程之前就将变量0改为2让后又改为0,A线程在操作的时候是不知道值是被修改过的,CAS还是能成功.
           A 0-------------------------->1
           B 0--------->2----------->0
           如果不关心值是否修改,则没有什么问题。可以加上版本戳来解决ABA问题
     2.消耗CPU资源.因为多个线程在执行CAS后 没有执行成功的又会重新循环执行 直到成功 或退出。这期间CPU是一直在运行的
          A 0---->1(成功 退出)
          B 0---->1(失败 重试)1---->2(成功 退出)
          C 0---->1(失败 重试)1---->2(失败 重试)2---->3(成功 退出)

     3.只能修改一个内存地址上的值,对想同时修改多个内存地址的值 只能用一个对象来存储 让后修改对象的属性

三.阻塞队列和线程池
   1.BlockingQueue
     非阻塞方法
     add     如果队列满了 抛出异常
     remove  如果队列为空 抛出异常

     offer   如果队列满了 返回false
     poll    如果队列为空 返回null

     阻塞方法
     put     如果队列满了 阻塞当前线程
     take    如果队列为空 阻塞当前线程

     主要的阻塞队列有:
     ArrayBlockingQueue      一个有数组结构组成的有界阻塞队列
     LinkedBlockingQueue     一个由链表结构组成的有界阻塞队列
     PriorityBlockingQueue   一个支持优先级排序的无界阻塞队列(就是元素要实现Comparable接口)
     DelayQueue              一个支持延迟获取的无界阻塞队列
     SynchronousQueue        一个不存储元素的阻塞队列(生产线程生产的数据需要有一个消费线程来消费)
     LinkedTransferQueue     一个由链表结构组成的无界阻塞队列(生产线程生产的数据可以尝试将该数据发送给一个消费者,如果不成功,再添加入队列)
     LinkedBlockingDeque     一个由链表结构组成的双向阻塞队列

    2.线程池的实现原理
      针对ThreadPoolExecutor的参数解读
       int corePoolSize                      核心线程数量
       int maximumPoolSize,                  最大线程数量
       long keepAliveTime,                   非核心线程在空闲时存活时间
       TimeUnit unit,                        时间单位
       BlockingQueue<Runnable> workQueue     存放任务的阻塞队列
       ThreadFactory threadFactory           线程工厂 一般不会使用 可以为线程设置名字
       RejectedExecutionHandler handler      拒绝策略 如果线程池能执行的任务已经满了 对新提交的任务的处理方式

      拒绝策略
      AbortPolicy         直接抛出一个异常
      CallerRunsPolicy    哪个线程提交的任务就在哪个线程中执行,如果线程池已经被关闭则直接丢弃任务
      DiscardOldestPolicy 丢弃最老的任务
      DiscardPolicy       直接丢弃任务

      线程池最大线程数的配置
        Runtime.getRuntime().availableProcessors()获取JAVA可用的处理器数量
      针对CPU密集型:需要CPU进行大量运算的时候 最大线程数 = 可用处理器数量(+1 这里加1是针对页缺失状态.因为操作系统会使用虚拟内存技术,
      而磁盘的读写速度远远小于内存中读写速度,所以为了防止如果一个线程运行时需要的资源在磁盘中,花太多的时间等待磁盘数据的读取,所以+1让CPU切换到其他线程，最大的利用CPU资源)
      ,多了反而会导致效率降低，因为切换线程也是需要消耗时间的.
      针对IO密集型:主要是网络访问和文件读取 最大线程数 = 可用处理器数量*2
      混合型:有CPU密集运算又有IO,如果两个执行时间差不多 就可以拆分为两个线程池

四:面试题(这里没有写答案)
   1.synchronized修饰普通方法和静态方法的区别?什么是可见性?
   2.锁分哪几类?
   3.CAS无锁编程的原理.
   4.ReentrantLock的实现原理.
   5.AQS原理(小米 京东)
   6.Synchronized的原理以及与ReentrantLock的区别.(360)
   7.Synchronized做了哪些优化(京东)
   8.Synchronized static与非static锁的区别和范围(小米)
   9.volatile 能否保证线程安全?在DCL上的作用是什么?
   10.volatile和synchronize有什么区别?(B站 小米 京东)
   11.什么是守护线程?你是如何退出一个线程的?
   12.sleep,wait,yield 的区别,wait的线程如何唤醒它?(东方头条)
   13.sleep是可中断的么?(小米)
   14.线程生命周期.
   15.ThreadLocal是什么?
   16.线程池基本原理.
   17.有三个线程T1,T2,T3,怎么确保它们按顺序执行?







一.RecyclerView的绘制流程(通常的情况下)
  1.onMeasure
        一般的LayoutManager重写了isAutoMeasureEnabled并且返回ture,所以mLayout.onMeasure(默认走Rv的defaultOnMeasure);
        接下来执行dispatchLayoutStep1(处理Adapter的更新,决定需要播放的动画,保存当前View的信息),完成后 mState.mLayoutStep = State.STEP_LAYOUT,dispatchLayoutStep2()布局处理,完成后mState.mLayoutStep = State.STEP_ANIMATIONS;
        执行mLayout.setMeasuredDimensionFromChildren确定RV的宽高;
          (1)如果RV是Wrap_content且ItemView中有AT_MOST的M模式的 我们需要再次执行dispatchLayoutStep2()布局处理,mState.mLayoutStep = State.STEP_ANIMATIONS;执行mLayout.setMeasuredDimensionFromChildren确定RV的宽高;
  2.onLayout
        dispatchLayout 这个方法也很重要
        执行dispatchLayoutStep3(保存信息，触发动画，清除垃圾)  mState.mLayoutStep = State.STEP_START

二.测量和布局都是交给了LayoutManager去处理，这里我们列举LinearLayoutManager
        onLayoutChildren 开始布局子view 由dispatchLayoutStep2方法触发
         -> fill 开始填充布局
          ->layoutChunk  layoutState.next(recycler)获取或创建ViewHolder,然后获取ItemView;测量子控件后，计算出子控件需要布局的坐标 layoutDecoratedWithMargins开始布局

三.RecyclerView的缓存 复用机制(缓存复用ViewHolder)
  1.RecyclerView的复用机制
   a.由onTouchEvent事件进入: 在MOVE事件中-->scrollByInternal()-->scrollStep()-->mLayout.scrollVerticallyBy/scrollHorizontallyBy(这里就直接讨论垂直滚动,LinearLayoutManager)
                                       -->scrollBy()
                                       -->fill(这个方法是复用的主要方法)-->layoutChunk(循环调用)-->layoutState.next(获取ItemView)--> addView(view);
                           获取缓存的ViewHolder然后获取ItemView
                           layoutState.next()-->recycler.getViewForPosition()-->tryGetViewHolderForPositionByDeadline(position, dryRun, FOREVER_NS).itemView;
                           获取缓存的ViewHolder
                           tryGetViewHolderForPositionByDeadline(position, dryRun, FOREVER_NS)
                             通过getChangedScrapViewForPosition(与动画相关),获取 mChangedScrap(当前屏幕的预布局) 中获取缓存的ViewHolder
                             通过getScrapOrHiddenOrCachedHolderForPosition(通过位置),获取  mAttachedScrap  mCachedViews  中获取缓存的ViewHolder
                             通过getScrapOrCachedViewForId(通过itemID viewType),获取  mAttachedScrap  mCachedViews  中获取缓存的ViewHolder
                             通过mViewCacheExtension.getViewForPositionAndType(用户自定义的缓存机制 一般用不到)
                             通过getRecycledViewPool().getRecycledView(type),获取 mRecyclerPool(类似于HashMap的数据结构 viewType为Key 相同Type的使用集合保存 最多一个type有5个数据) 中获取缓存的ViewHolder
                             如果上面的缓存机制都没有获取到ViewHolder,mAdapter.createViewHolder(RecyclerView.this, type)-->onCreateViewHolder(parent, viewType);
                             绑定ViewHolder通过tryBindViewHolderByDeadline--> mAdapter.bindViewHolder(holder, offsetPosition) -->onBindViewHolder(holder, position, holder.getUnmodifiedPayloads());

  2.RecyclerView的缓存机制
   a.由onLayoutChildren方法进入:detachAndScrapAttachedViews-->scrapOrRecycleView
     1).recycler.recycleViewHolderInternal(viewHolder)
        如果ViewHolder是没有改变的(比如更新视图数据 移除等),判断cachedViewSize的大小,如果>=mViewCacheMax(默认为2),调用recycleCachedViewAt(0)-->addViewHolderToRecycledViewPool并从mCachedViews中移除当前ViewHolder
        则会执行mCachedViews缓存ViewHolder.
        如果ViewHolder是改变了的,直接调用addViewHolderToRecycledViewPool-->getRecycledViewPool().putRecycledView(holder)

     2).recycler.scrapView(view)
        如果ViewHolder没有改变的话, mAttachedScrap.add(holder);
        否则 mChangedScrap.add(holder);

  3.RecyclerView在onLayout(复用ViewHolder)-->dispatchLayout()--> mLayout.onLayoutChildren(mRecycler, mState);-->fill()
  4.fill方法中缓存ViewHolder:fill()-->recycleByLayoutState()-->recycleViewsFromStart/recycleViewsFromEnd-->recycleChildren()-->removeAndRecycleViewAt()-->recycler.recycleView(view)-->recycleViewHolderInternal()
    在fill方法中缓存的ViewHolder只会缓存的mCacheViews和RecycledViewPool中
